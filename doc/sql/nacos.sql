/*
 Navicat Premium Data Transfer

 Source Server         : mysql-master0
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost:36005
 Source Schema         : nacos

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 10/08/2022 19:07:28
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfo_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 439 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info
-- ----------------------------
INSERT INTO `config_info` VALUES (162, 'service.vgroupMapping.my_test_tx_group', 'SEATA_GROUP', 'seata-server-cluster', 'a80b64927c783df0b4195faa3a897d24', '2021-03-03 00:48:55', '2021-03-04 07:24:49', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (163, 'service.seata-server-cluster.grouplist', 'SEATA_GROUP', '127.0.0.1:8091', 'c32ce0d3e264525dcdada751f98143a3', '2021-03-03 00:48:56', '2021-03-12 07:52:37', NULL, '192.168.137.1', '', 'seata-dev', '', '', '', '', '');
INSERT INTO `config_info` VALUES (164, 'store.mode', 'SEATA_GROUP', 'db', 'd77d5e503ad1439f585ac494268b351b', '2021-03-03 00:48:56', '2021-03-04 07:24:55', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (165, 'store.db.datasource', 'SEATA_GROUP', 'druid', '3d650fb8a5df01600281d48c47c9fa60', '2021-03-03 00:48:56', '2021-03-04 07:24:55', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (166, 'store.db.dbType', 'SEATA_GROUP', 'mysql', '81c3b080dad537de7e10e0987a4bf52e', '2021-03-03 00:48:57', '2021-03-04 07:24:55', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (167, 'store.db.driverClassName', 'SEATA_GROUP', 'com.mysql.cj.jdbc.Driver', '33763409bb7f4838bde4fae9540433e4', '2021-03-03 00:48:57', '2021-03-04 07:24:56', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (168, 'store.db.url', 'SEATA_GROUP', 'jdbc:mysql://192.168.137.200:3308/seata?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai', '0cafe0d149d1b85fc39f2416c995eda8', '2021-03-03 00:48:57', '2021-03-12 07:56:56', NULL, '192.168.137.1', '', 'seata-dev', '', '', '', '', '');
INSERT INTO `config_info` VALUES (169, 'store.db.user', 'SEATA_GROUP', 'root', '63a9f0ea7bb98050796b649e85481845', '2021-03-03 00:48:58', '2021-03-04 07:24:56', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (170, 'store.db.password', 'SEATA_GROUP', 'root', '63a9f0ea7bb98050796b649e85481845', '2021-03-03 00:48:58', '2021-03-04 07:24:57', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (249, 'transport.type', 'SEATA_GROUP', 'TCP', 'b136ef5f6a01d816991fe3cf7a6ac763', '2021-03-04 07:24:44', '2021-03-04 07:24:44', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (250, 'transport.server', 'SEATA_GROUP', 'NIO', 'b6d9dfc0fb54277321cebc0fff55df2f', '2021-03-04 07:24:45', '2021-03-04 07:24:45', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (251, 'transport.heartbeat', 'SEATA_GROUP', 'true', 'b326b5062b2f0e69046810717534cb09', '2021-03-04 07:24:45', '2021-03-04 07:24:45', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (252, 'transport.enableClientBatchSendRequest', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:45', '2021-03-04 07:24:45', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (253, 'transport.threadFactory.bossThreadPrefix', 'SEATA_GROUP', 'NettyBoss', '0f8db59a3b7f2823f38a70c308361836', '2021-03-04 07:24:45', '2021-03-04 07:24:45', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (254, 'transport.threadFactory.workerThreadPrefix', 'SEATA_GROUP', 'NettyServerNIOWorker', 'a78ec7ef5d1631754c4e72ae8a3e9205', '2021-03-04 07:24:46', '2021-03-04 07:24:46', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (255, 'transport.threadFactory.serverExecutorThreadPrefix', 'SEATA_GROUP', 'NettyServerBizHandler', '11a36309f3d9df84fa8b59cf071fa2da', '2021-03-04 07:24:46', '2021-03-04 07:24:46', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (256, 'transport.threadFactory.shareBossWorker', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:46', '2021-03-04 07:24:46', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (257, 'transport.threadFactory.clientSelectorThreadPrefix', 'SEATA_GROUP', 'NettyClientSelector', 'cd7ec5a06541e75f5a7913752322c3af', '2021-03-04 07:24:47', '2021-03-04 07:24:47', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (258, 'transport.threadFactory.clientSelectorThreadSize', 'SEATA_GROUP', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2021-03-04 07:24:47', '2021-03-04 07:24:47', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (259, 'transport.threadFactory.clientWorkerThreadPrefix', 'SEATA_GROUP', 'NettyClientWorkerThread', '61cf4e69a56354cf72f46dc86414a57e', '2021-03-04 07:24:47', '2021-03-04 07:24:47', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (260, 'transport.threadFactory.bossThreadSize', 'SEATA_GROUP', '1', 'c4ca4238a0b923820dcc509a6f75849b', '2021-03-04 07:24:48', '2021-03-04 07:24:48', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (261, 'transport.threadFactory.workerThreadSize', 'SEATA_GROUP', 'default', 'c21f969b5f03d33d43e04f8f136e7682', '2021-03-04 07:24:48', '2021-03-04 07:24:48', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (262, 'transport.shutdown.wait', 'SEATA_GROUP', '3', 'eccbc87e4b5ce2fe28308fd9f2a7baf3', '2021-03-04 07:24:48', '2021-03-04 07:24:48', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (264, 'service.enableDegrade', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:49', '2021-03-04 07:24:49', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (265, 'service.disableGlobalTransaction', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:49', '2021-03-04 07:24:49', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (266, 'client.rm.asyncCommitBufferLimit', 'SEATA_GROUP', '10000', 'b7a782741f667201b54880c925faec4b', '2021-03-04 07:24:50', '2021-03-04 07:24:50', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (267, 'client.rm.lock.retryInterval', 'SEATA_GROUP', '100', 'f899139df5e1059396431415e770c6dd', '2021-03-04 07:24:50', '2021-03-10 06:25:10', NULL, '116.25.45.203', '', 'seata-dev', '', '', '', '', '');
INSERT INTO `config_info` VALUES (268, 'client.rm.lock.retryTimes', 'SEATA_GROUP', '30', '34173cb38f07f89ddbebc2ac9128303f', '2021-03-04 07:24:50', '2021-03-10 06:24:59', NULL, '116.25.45.203', '', 'seata-dev', '', '', '', '', '');
INSERT INTO `config_info` VALUES (269, 'client.rm.lock.retryPolicyBranchRollbackOnConflict', 'SEATA_GROUP', 'true', 'b326b5062b2f0e69046810717534cb09', '2021-03-04 07:24:51', '2021-03-04 07:24:51', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (270, 'client.rm.reportRetryCount', 'SEATA_GROUP', '5', 'e4da3b7fbbce2345d7772b0674a318d5', '2021-03-04 07:24:51', '2021-03-04 07:24:51', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (271, 'client.rm.tableMetaCheckEnable', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:51', '2021-03-04 07:24:51', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (272, 'client.rm.sqlParserType', 'SEATA_GROUP', 'druid', '3d650fb8a5df01600281d48c47c9fa60', '2021-03-04 07:24:52', '2021-03-04 07:24:52', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (273, 'client.rm.reportSuccessEnable', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:52', '2021-03-04 07:24:52', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (274, 'client.rm.sagaBranchRegisterEnable', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:52', '2021-03-04 07:24:52', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (275, 'client.tm.commitRetryCount', 'SEATA_GROUP', '5', 'e4da3b7fbbce2345d7772b0674a318d5', '2021-03-04 07:24:53', '2021-03-04 07:24:53', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (276, 'client.tm.rollbackRetryCount', 'SEATA_GROUP', '5', 'e4da3b7fbbce2345d7772b0674a318d5', '2021-03-04 07:24:53', '2021-03-04 07:24:53', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (277, 'client.tm.defaultGlobalTransactionTimeout', 'SEATA_GROUP', '60000', '2b4226dd7ed6eb2d419b881f3ae9c97c', '2021-03-04 07:24:53', '2021-03-04 07:24:53', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (278, 'client.tm.degradeCheck', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:24:54', '2021-03-04 07:24:54', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (279, 'client.tm.degradeCheckAllowTimes', 'SEATA_GROUP', '10', 'd3d9446802a44259755d38e6d163e820', '2021-03-04 07:24:54', '2021-03-04 07:24:54', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (280, 'client.tm.degradeCheckPeriod', 'SEATA_GROUP', '2000', '08f90c1a417155361a5c4b8d297e0d78', '2021-03-04 07:24:54', '2021-03-04 07:24:54', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (288, 'store.db.minConn', 'SEATA_GROUP', '5', 'e4da3b7fbbce2345d7772b0674a318d5', '2021-03-04 07:24:57', '2021-03-04 07:24:57', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (289, 'store.db.maxConn', 'SEATA_GROUP', '30', '34173cb38f07f89ddbebc2ac9128303f', '2021-03-04 07:24:57', '2021-03-04 07:24:57', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (290, 'store.db.globalTable', 'SEATA_GROUP', 'global_table', '8b28fb6bb4c4f984df2709381f8eba2b', '2021-03-04 07:24:58', '2021-03-04 07:24:58', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (291, 'store.db.branchTable', 'SEATA_GROUP', 'branch_table', '54bcdac38cf62e103fe115bcf46a660c', '2021-03-04 07:24:58', '2021-03-04 07:24:58', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (292, 'store.db.queryLimit', 'SEATA_GROUP', '100', 'f899139df5e1059396431415e770c6dd', '2021-03-04 07:24:58', '2021-03-04 07:24:58', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (293, 'store.db.lockTable', 'SEATA_GROUP', 'lock_table', '55e0cae3b6dc6696b768db90098b8f2f', '2021-03-04 07:24:58', '2021-03-04 07:24:58', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (294, 'store.db.maxWait', 'SEATA_GROUP', '5000', 'a35fe7f7fe8217b4369a0af4244d1fca', '2021-03-04 07:24:59', '2021-03-04 07:24:59', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (295, 'server.recovery.committingRetryPeriod', 'SEATA_GROUP', '1000', 'a9b7ba70783b617e9998dc4dd82eb3c5', '2021-03-04 07:24:59', '2021-03-04 07:24:59', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (296, 'server.recovery.asynCommittingRetryPeriod', 'SEATA_GROUP', '1000', 'a9b7ba70783b617e9998dc4dd82eb3c5', '2021-03-04 07:24:59', '2021-03-04 07:24:59', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (297, 'server.recovery.rollbackingRetryPeriod', 'SEATA_GROUP', '1000', 'a9b7ba70783b617e9998dc4dd82eb3c5', '2021-03-04 07:25:00', '2021-03-04 07:25:00', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (298, 'server.recovery.timeoutRetryPeriod', 'SEATA_GROUP', '1000', 'a9b7ba70783b617e9998dc4dd82eb3c5', '2021-03-04 07:25:00', '2021-03-04 07:25:00', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (299, 'server.maxCommitRetryTimeout', 'SEATA_GROUP', '-1', '6bb61e3b7bce0931da574d19d1d82c88', '2021-03-04 07:25:00', '2021-03-04 07:25:00', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (300, 'server.maxRollbackRetryTimeout', 'SEATA_GROUP', '-1', '6bb61e3b7bce0931da574d19d1d82c88', '2021-03-04 07:25:01', '2021-03-04 07:25:01', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (301, 'server.rollbackRetryTimeoutUnlockEnable', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:25:01', '2021-03-04 07:25:01', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (302, 'client.undo.dataValidation', 'SEATA_GROUP', 'true', 'b326b5062b2f0e69046810717534cb09', '2021-03-04 07:25:01', '2021-03-04 07:25:01', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (303, 'client.undo.logSerialization', 'SEATA_GROUP', 'jackson', 'b41779690b83f182acc67d6388c7bac9', '2021-03-04 07:25:02', '2021-03-04 07:25:02', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (304, 'client.undo.onlyCareUpdateColumns', 'SEATA_GROUP', 'true', 'b326b5062b2f0e69046810717534cb09', '2021-03-04 07:25:02', '2021-03-04 07:25:02', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (305, 'server.undo.logSaveDays', 'SEATA_GROUP', '7', '8f14e45fceea167a5a36dedd4bea2543', '2021-03-04 07:25:02', '2021-03-04 07:25:02', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (306, 'server.undo.logDeletePeriod', 'SEATA_GROUP', '86400000', 'f4c122804fe9076cb2710f55c3c6e346', '2021-03-04 07:25:03', '2021-03-04 07:25:03', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (307, 'client.undo.logTable', 'SEATA_GROUP', 'undo_log', '2842d229c24afe9e61437135e8306614', '2021-03-04 07:25:03', '2021-03-04 07:25:03', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (308, 'log.exceptionRate', 'SEATA_GROUP', '100', 'f899139df5e1059396431415e770c6dd', '2021-03-04 07:25:03', '2021-03-04 07:25:03', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (309, 'transport.serialization', 'SEATA_GROUP', 'seata', 'b943081c423b9a5416a706524ee05d40', '2021-03-04 07:25:03', '2021-03-04 07:25:03', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (310, 'transport.compressor', 'SEATA_GROUP', 'none', '334c4a4c42fdb79d7ebc3e73b517e6f8', '2021-03-04 07:25:04', '2021-03-04 07:25:04', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (311, 'metrics.enabled', 'SEATA_GROUP', 'false', '68934a3e9455fa72420237eb05902327', '2021-03-04 07:25:04', '2021-03-04 07:25:04', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (312, 'metrics.registryType', 'SEATA_GROUP', 'compact', '7cf74ca49c304df8150205fc915cd465', '2021-03-04 07:25:04', '2021-03-04 07:25:04', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (313, 'metrics.exporterList', 'SEATA_GROUP', 'prometheus', 'e4f00638b8a10e6994e67af2f832d51c', '2021-03-04 07:25:05', '2021-03-04 07:25:05', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (314, 'metrics.exporterPrometheusPort', 'SEATA_GROUP', '9898', '7b9dc501afe4ee11c56a4831e20cee71', '2021-03-04 07:25:05', '2021-03-04 07:25:05', NULL, '116.25.45.103', '', 'seata-dev', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `config_info` VALUES (326, 'cloud-config.properties', 'DEFAULT_GROUP', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice.client.ipAddress=192.168.137.200\n####################################################################################################\n################################################## 注册中心 - nacose ###############################\n####################################################################################################\n# 命名空间\nconfig.register.namespace=${spring.cloud.nacos.config.namespace}\n# 注册中心地址\nconfig.register.serverAddr=http://${spring.cloud.nacos.config.server-addr}\n####################################################################################################\n################################################## learn-cloud-gateway ################################\n####################################################################################################\n# 移动 /usr/app/app\n# pc /usr/app/web\nconfig.gateway.static.locations=file:/usr/local/app\n#config.zuul.static.locations=file:///D:/usr/app', 'd10c790c2550336669c40a96d9875832', '2021-03-12 07:25:07', '2021-03-12 07:28:13', NULL, '192.168.137.1', '', 'pro', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (328, 'sys-config-mq.properties', 'DEFAULT_GROUP', 'mq.service.ipAddress=192.168.137.200\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '1503fcf69627121ea72fcf42fefbdc19', '2021-03-12 07:25:07', '2021-08-24 11:41:46', NULL, '192.168.137.1', '', 'pro', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (329, 'sys-config-redis.properties', 'DEFAULT_GROUP', 'redis.service.ipAddress=192.168.137.200\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6399\n#redis链接密码\nspring.redis.password=require@@pass##$$1234%%4321\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认为第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', 'e8fd99008d5c929449118751a2f66e1d', '2021-03-12 07:25:07', '2021-03-12 07:29:29', NULL, '192.168.137.1', '', 'pro', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (330, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'd7f2b600d8428df4c6451891891b812d', '2021-03-12 07:25:07', '2022-03-27 07:55:00', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (331, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', 'feign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}', 'd20b70fa4debfe90ff7d4aee8db46176', '2021-03-12 07:25:07', '2022-03-27 07:55:17', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (332, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）', 'aff3bb116e21251e76661567f6a7e6fe', '2021-03-12 07:25:07', '2022-03-27 07:55:57', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (333, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'c858fad49b327bcf762072a55c9f6cb9', '2021-03-12 07:25:07', '2022-03-27 07:56:24', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (334, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'd7f2b600d8428df4c6451891891b812d', '2021-03-12 07:25:07', '2022-03-27 07:57:27', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (335, 'learn-shop-public-job.yml', 'DEFAULT_GROUP', 'server:\n  port: 8011\n\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'a6ba97cac83741f070dbf541a5e06ad5', '2021-03-12 07:25:07', '2022-03-27 07:57:44', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (336, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', '6148847ee6059ca22e8a8675616c5b3f', '2021-03-12 07:25:07', '2022-03-27 07:57:07', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (340, 'sys-config-mq.properties', 'DEFAULT_GROUP', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2021-03-12 07:25:26', '2022-08-10 04:54:34', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (341, 'sys-config-redis.properties', 'DEFAULT_GROUP', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '6b275219932c5d6f38038a546e0c1568', '2021-03-12 07:25:26', '2021-03-12 07:25:26', NULL, '192.168.137.1', '', 'dev', NULL, NULL, NULL, 'properties', NULL);
INSERT INTO `config_info` VALUES (342, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n# 如果路由方式是serviceId的方式，那么ribbon的生效，如果是url的方式，则zuul.host开头的生效\nribbon:\n  ReadTimeout: 15000\n  ConnectTimeout: 10000\n\n# 显示 sql 的查询参数\nlogging:\n  level:\n    org:\n      hibernate:\n        type:\n          descriptor:\n            sql:\n              BasicBinder: TRACE\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n', '2db4f098505d267566d342aedb6859c1', '2021-03-12 07:25:26', '2022-08-10 06:06:31', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (343, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n  activiti:\n    check-process-definitions: false #校验流程文件，默认校验resources下的processes文件夹里的流程文件\n    mail-server-use-ssl: true\n    database-schema-update: false #首次启动时，需要设置为true，自动建表\n    async-executor-activate: false\n  thymeleaf:\n    mode: HTML5\n    cache: false\n    prefix: classpath:/templates/\n  freemarker:\n    cache: false\n    template-loader-path: classpath:/templates/\n\n\ncustom:\n  menu:\n    write-cache: true #菜单写入缓存中\n  common:\n    base-file-path: D:/uploadfile # base 路径\n    image-mapping: /displayImag # 映射处理的路径，当 url 中有 /displayImag 时，资源映射到 D:/temp-rainy/\n    markdown-img-path: /markdown # 图片保存的路径\n    user-icon-img-path: /usericon # 图片保存的路径\n    start-init-data: false #启动时，是否初始数据（首次启动时需要设置为true,默认为true）\n  mail:\n    from: ${spring.mail.username} #系统对外发送邮件的地址\n    host: smtp.exmail.qq.com\n    port: 465\n    username: XXXXXX\n    password: XXXXXX\n  thread-pool:\n    core-pool-size: 8 # 线程池长期维持的线程数 默认 8\n    maximum-pool-size: 10 # 线程数的上限 默认 10\n    capacity: 512 # 任务的排队队列 默认 512\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  mapper-locations: classpath*:mapper/**/*Mapper.xml', 'f79bd715b5300484c29f05b38a1e21c4', '2021-03-12 07:25:26', '2022-08-10 03:30:35', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (344, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）\n\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'ea5aabc3b5e3adf8e60fef16d7639af9', '2021-03-12 07:25:26', '2022-08-10 04:49:09', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (345, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', 'feign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000\n\n###### 支付宝配置 #####\nalipay:\n  scan:\n    appId: 2016082500310007\n    privateKey: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDNNgoEcF2hTNWhaeOIMgSNf2OAyrOzmZo+/gKZelXaHsVkHgHg2PwJXXNlOkp5blERVxyxiwdzsRvdnC3Ul6UVbZHm+o2EPowYwZQ5CMiKnPBZ1n0fBi9v/XFmDXurz8OE+63rtfpl4ibKlTaJPh7gMX/krJ8JnSRzHxtVxhl6PI2S5wshWilWykOVmWKkayyu+0ulsOXw4GQHxxGiH0Q5k3g6m4MsDLRS+Pj7o9k0c0dCAr+riJcgxpBKZozAsezY6yhX8/eT0Q6oSFXblMuHg/GNwPAshR7RSWYp4XJWQSfN7Qvbz2d5giqpO/FXRiGz2yKPFIEaf01eGzzGXbxrAgMBAAECggEAXHsREqUNHSdCU4cj+noIITiawC0ZxUPhBqh0xXQjgrRBYvg/AnTnSNUrryAQ9h6oPDdVABJW3mWf2ESNRvS8eiayDTU3V7TUcEe1I+r4bbeCfgoywyuHb2H5m/NRm8F7LNA7tjGB0i6UKtIKDNnJEmJcb9L3rV57UcJgEEzBqJsYVqJGAH+51tELa+Nvoc/hjdAmdc/JQBPjKRSUMRbre7Hi2upA6eQf40JqZ7MewKumwAowkUPJAt1IXT9lZfinbOE6nGQLS4rfSQDtLpv34Ogkh1Q3p65wtIp8fNtj0BGWqKtS6ioK94HlAfapFmVIePpPzWxA3u3nNzU+7e7HkQKBgQD2TeBnYtvBA/3PJsJVKJRKd77ArSpBpIdvMmt5uNCdglVtxzBpXCQCTVbHhwD1k5geHqXxv941+JgZowALG+Ght/41ISNfBR23Wp5jQsF9rh/O3Zf6TP5YuCZkaaagKTDBvE25sQMvacfU2t4pwYFVFDgCl0QTxrzNAnXnn92IOQKBgQDVSgxCaqvFb4Y8YTCPL07XWWGNLm/RugtjIUWII5ivhE7O2oT+IFYIDdkQAYrQqk8dAYznncZSXUBMsp5UUTsRNN93sbv1/W3CJG4LLrtOxxfvIygGQ73K/KcwUcLfLqfKcnDFPC966062eCbaIiW2vES35/ga7ASrUp5n7EzBwwKBgFC+9RtPqHVdhp6buUfLttm26f0mh9zfQFsu71cHRLTuXm1PyMoxn8h1bEabNrBLg6oUKBjZ6tJMvihhbIk3yb+HnznxtDPZbIWImrY101MNe3YI5WL0TMnvDP8MN8j31/kbb2u54S5xAkcAvaZ4vpqSt036IyJMm+alsNuPaEPZAoGBAJPpwzC4GyFToyryV6Oksi9j2+P1xTQTqlv3semkjfmCbsjDACHgOOli+RpBh4wH38+EyLvDTcrGwpWt9WER6D2ZhjPSvT/tnZVagDofEWSja3S608Hsbo17w1IeEV+HUnNyA8S0ZVUAJFkkYAU8Ux0z2RAUvZml/eL168a0N9LTAoGBANpzvszR7wmQlDSDJaQgIU3jtSyxekf36uLpObdILnoDIQa9S17obIKFULqF/e16h/VmEZPJEBlWVGXzeTyXGOgF4VvqUJhKvGk3nPald48HK/OyKaH1VTdwKpk9VpNE3tHvnKAQVyOCEs5wvTYGZV8t98aS5pAk+0oPjLugCzJn\n    aliPayPublicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7zmfFuPvlQm5+/xv0uNi46yAk3V/lwABSunI0NB5GFukfVIe1OoQw4Puv4NRfHO3gqCKcN0g+gt2vTaAm8JJN9dy4HKNlB6SuOGGPtblQdsmvrY64moOwY2tZL7LAm4eiRfo4eWSczA41pjS7iCtzxyUkJ9H/1/5mmvsrCQ9jhYnQ/Si7iuTniLzIejFUnM1vWQXHtT4qmQjjotXF+OSvoohBxW2s0DY6rWl62qoEB0xJkg4KGofjuNhEuAlFDgWDOfYKNXCXKeXVuEvzamKGsQmFFxSNQvu6AGn3qvPogsPdWxesLmh48Ayei9BRL8d4RNcjOzXOMLv59YKX1LErQIDAQAB\n    notifyUrl: http://1p7v403130.iask.in/notify\n    returnUrl: http://1p7v403130.iask.in/return\n    gatewayUrl: https://openapi.alipaydev.com/gateway.do # 沙箱\n#    gatewayUrl: https://openapi.alipay.com/gateway.do # 生产\n#    charset: UTF-8 #编码格式,默认：UTF-8\n#    signType: RSA2 #商户生成签名字符串所使用的签名算法类型,默认：RSA2\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'f1dad8c59ed450feb498797a6dac6027', '2021-03-12 07:25:26', '2022-08-10 03:34:16', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (346, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', 'spring:\n  jpa: #JPA配置\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: none\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\nauth:\n  token:\n    alias: jwt\n    jwtFileName: jwt.jks\n    jwtPassword: 123456789\n  white-list:\n    - \"/rsa/publicKey\" # 获取公钥\n# 日志\nlogging:\n  level:\n    org:\n      springframework:\n        security: DEBUG\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'fd821963aba0caa1fe6c7d4fdafa4cf1', '2021-03-12 07:25:26', '2022-08-10 03:18:43', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (348, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', 'spring:\n  elasticsearch:\n    rest:\n      connection-timeout: 10s\n      uris:\n        - http://127.0.0.1:9200\nfeign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', '0deb3968ed79bccc647c18628f549758', '2021-03-12 07:25:26', '2022-08-10 03:53:33', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (357, 'sys-config-db.yml', 'DEFAULT_GROUP', 'db.service.ipAddress: 192.168.137.200\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36005/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop\n        password: pass123\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36006/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop_r\n        password: pass123\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36007/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop_r\n        password: pass123\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', 'd822cfd2bc20028d834b9ebdfdfbcd39', '2021-08-24 11:07:42', '2021-08-24 12:51:56', NULL, '192.168.137.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (358, 'sys-config-db.yml', 'DEFAULT_GROUP', 'db.service.ipAddress: 127.0.0.1\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36005/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop\n        password: pass123\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36006/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop_r\n        password: pass123\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:36007/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop_r\n        password: pass123\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', '9c1258dcc533346c9a4169017ba4d589', '2021-08-24 11:08:25', '2022-03-27 07:37:36', 'nacos', '172.19.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (375, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'd75881ee127581a0ee0844d9de24d4de', '2021-09-04 04:30:12', '2022-03-27 07:56:41', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (377, 'learn-shop-app.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', '6148847ee6059ca22e8a8675616c5b3f', '2021-09-10 13:45:29', '2022-03-27 07:55:36', 'nacos', '172.19.0.1', '', 'pro', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (378, 'sys-config-notice.yml', 'DEFAULT_GROUP', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', '80c66926699d6a826df9aaab1dd32aa0', '2021-12-22 12:44:20', '2022-08-10 05:56:14', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (379, 'sys-config-notice.yml', 'DEFAULT_GROUP', 'spring:\r\n  # mq 配置\r\n  rabbitmq:\r\n    # 中间件类型\r\n    type: rabbit\r\n    # mq服务器地址\r\n    host: 192.168.137.200\r\n    # mq服务器端口\r\n    port: 5672\r\n    # mq用户名和密码\r\n    username: admin\r\n    password: admin123\r\n    # 虚拟主机\r\n    virtual-host: /learn-default\r\n\r\nnotice:\r\n  # 钉钉配置\r\n  ding:\r\n    # 钉钉机器人\r\n    robot:\r\n      # webhook\r\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\r\n      # 加签\r\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\r\n  # rabbit mq 配置\r\n  mq:\r\n    # mq 的队列、路由、交换机配置\r\n    mq-collect:\r\n      # 日志收集\r\n      log-collect:\r\n        queue: logCollectQueue\r\n        exchange: logCollectExchange\r\n        exchange-type: direct\r\n        route-key: logCollectRouteKey\r\n      # 运行自动任务\r\n      run-job-test:\r\n        queue: runJobTestQueue\r\n        exchange: runJobTestExchange\r\n        exchange-type: direct\r\n        route-key: runJobTestRouteKey\r\n      # 执行sql 配置\r\n      execute-sql:\r\n        queue: executeSqlQueue\r\n        exchange: executeSqlExchange\r\n        route-key: executeSqlRouteKey\r\n      # 刷新 es 缓存 配置\r\n      refresh-es:\r\n        queue: refreshEsQueue\r\n        exchange: productExchange\r\n        route-key: refreshEsRouteKey\r\n      #  秒杀订单发送订单系统 配置\r\n      sec-kill-to-core-order:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToCoreOrderQueue\r\n        dlx-queue: secKillToCoreOrderQueueDlx\r\n        dlx-exchange: secKillOrderExchangeDlx\r\n        dlx-exchange-type: fanout\r\n      #  秒杀订单发送system系统 配置\r\n      sec-kill-to-admin-system:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToAdminSystemQueue\r\n      #  发送邮件 配置\r\n      send-mail:\r\n        queue: sendmailQueue\r\n        exchange: sendMailExchange\r\n        route-key: sendmailRouteKey\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'db97224b941b1ec1d075273b224edc77', '2021-12-22 12:45:01', '2021-12-22 12:45:01', NULL, '192.168.137.1', '', 'pro', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (403, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'fccdb730be16b02408a7aae563dbdc36', '2022-03-27 07:58:22', '2022-08-10 03:40:24', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (404, 'learn-shop-core-seckill.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'b8e361e8634d1d9ecb7ab6fb9384cf94', '2022-03-27 07:59:52', '2022-03-27 07:59:52', NULL, '172.19.0.1', '', 'pro', '', NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (405, 'learn-shop-app.yml', 'DEFAULT_GROUP', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', 'd87d953c8ebfd5aac7a17b9788d22866', '2022-03-27 08:00:20', '2022-08-10 04:18:28', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (408, 'cloud-config.yml', 'DEFAULT_GROUP', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n    ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  gateway: \n      static: \n        locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n####################################################################################################\n################################################## 日志 配置 #################################\n####################################################################################################\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称\n\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"', 'a8cd8d58b28ba5fcc25428f95386251d', '2022-08-10 01:45:34', '2022-08-10 03:14:08', 'nacos', '172.25.0.1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (431, 'sys-config-mq.properties-copy', 'DEFAULT_GROUP', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n# 控制输入MQ的日志级别\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '4fb157201106a3633bdb397384f93ab2', '2022-08-10 04:53:52', '2022-08-10 04:53:52', NULL, '172.25.0.1', '', 'dev', '', NULL, NULL, 'properties', NULL);

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime(0) NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfoaggr_datagrouptenantdatum`(`data_id`, `group_id`, `tenant_id`, `datum_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '增加租户字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfobeta_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_beta' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfotag_datagrouptenanttag`(`data_id`, `group_id`, `tenant_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_tag' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation`  (
  `id` bigint(0) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(0) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE INDEX `uk_configtagrelation_configidtag`(`id`, `tag_name`, `tag_type`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_tag_relation' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity`  (
  `id` bigint unsigned NOT NULL COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int unsigned NOT NULL COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL COMMENT '使用量',
  `max_size` int unsigned NOT NULL COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int unsigned NOT NULL COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_group_id`(`group_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '集群、各Group容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info`  (
  `id` bigint unsigned NOT NULL,
  `nid` bigint unsigned NOT NULL,
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin,
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `idx_gmt_create`(`gmt_create`) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified`) USING BTREE,
  INDEX `idx_did`(`data_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 500 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '多租户改造' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
INSERT INTO `his_config_info` VALUES (346, 464, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'd7f2b600d8428df4c6451891891b812d', '2022-08-10 14:40:07', '2022-08-10 01:40:07', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (346, 465, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nlogging:\n  config: classpath:logback-logstash.xml    ', '118eec405182a961a2f74dd1f9588e6d', '2022-08-10 14:42:10', '2022-08-10 01:42:11', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (0, 466, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice.client.ipAddress=127.0.0.1\n####################################################################################################\n################################################## 注册中心 - nacose ###############################\n####################################################################################################\n# 命名空间\nconfig.register.namespace=${spring.cloud.nacos.config.namespace}\n# 注册中心地址\nconfig.register.serverAddr=http://${spring.cloud.nacos.config.server-addr}\n####################################################################################################\n################################################## learn-cloud-gateway ################################\n####################################################################################################\n# 移动 /usr/app/app\n# pc /usr/app/web\nconfig.gateway.static.locations=file:///D:/GitHub/learn/learn-shop-ui-admin/dist\n#config.gateway.static.locations=file:///D:/usr/app\n', '258faee275633d3b9698845b6ae65dd0', '2022-08-10 14:45:33', '2022-08-10 01:45:34', NULL, '172.25.0.1', 'I', 'dev');
INSERT INTO `his_config_info` VALUES (408, 467, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice.client.ipAddress=127.0.0.1\n####################################################################################################\n################################################## 注册中心 - nacose ###############################\n####################################################################################################\n# 命名空间\nconfig.register.namespace=${spring.cloud.nacos.config.namespace}\n# 注册中心地址\nconfig.register.serverAddr=http://${spring.cloud.nacos.config.server-addr}\n####################################################################################################\n################################################## learn-cloud-gateway ################################\n####################################################################################################\n# 移动 /usr/app/app\n# pc /usr/app/web\nconfig.gateway.static.locations=file:///D:/GitHub/learn/learn-shop-ui-admin/dist\n#config.gateway.static.locations=file:///D:/usr/app\n', '258faee275633d3b9698845b6ae65dd0', '2022-08-10 15:39:47', '2022-08-10 02:39:48', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 468, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n    client:\n        ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n    register: \n        namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n        serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n    gateway: \n        static: \n            locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\nconfig:\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称      ', 'b4349290244d8077759cf45eb353d5d2', '2022-08-10 15:41:43', '2022-08-10 02:41:43', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 469, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n    client:\n        ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n    register: \n        namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n        serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n    gateway: \n        static: \n            locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\nconfig:\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称      ', 'ae0f1303d09b5cc20246771b9f5220a8', '2022-08-10 15:49:57', '2022-08-10 02:49:58', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (346, 470, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${service.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n\nconfig:\n  mq:\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\n\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nlogging:\n  config: classpath:logback-logstash.xml    ', 'c5de267edddad72814c679b54d2fd7c6', '2022-08-10 15:52:42', '2022-08-10 02:52:42', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 471, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n    client:\n        ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n    # register: \n    #     namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n    #     serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n    gateway: \n        static: \n            locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\nconfig:\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称      ', '4fa3e294754d2d2e6ed3fbea94f65eca', '2022-08-10 15:59:35', '2022-08-10 02:59:35', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 472, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n      ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  # register: \n  #     namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n  #     serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n  gateway: \n      static: \n          locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\nconfig:\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称', '9537b7c24942e5d8798dba589de4a9dd', '2022-08-10 15:59:59', '2022-08-10 02:59:59', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 473, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n    ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  # register: \n  #     namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n  #     serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n  gateway: \n      static: \n        locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\nconfig:\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称', '55be0436cac17df696ed653c77d90608', '2022-08-10 16:03:30', '2022-08-10 03:03:30', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (346, 474, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  # cloud:\n  #   nacos:\n  #     discovery:\n  #       username: nacos\n  #       password: nacos\n  #       namespace: ${config.register.namespace} # 命名空间\n  #       server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${service.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nlogging:\n  config: classpath:logback-logstash.xml    ', 'dfff3bc91e1d1d534af4f6e12d71771e', '2022-08-10 16:08:40', '2022-08-10 03:08:40', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (408, 475, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n    ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  # register: \n  #     namespace: ${spring.cloud.nacos.config.namespace} # 命名空间\n  #     serverAddr: http://${spring.cloud.nacos.config.server-addr} # 注册中心地址\n  gateway: \n      static: \n        locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n####################################################################################################\n################################################## MQ、日志收集 配置 #################################\n####################################################################################################\n  mq:\n    host: ${service.client.ipAddress}\n    #mq用户名和密码\n    username: admin\n    password: admin123\n    #mq服务器端口\n    port: 5672\n    #虚拟主机\n    virtual-host: /learn-default\n    # 日志输入MQ配置\n    logCollect:\n      queue: logCollectQueue\n      exchange: logCollectExchange\n      exchange-type: direct\n      route-key: logCollectRouteKey\n      #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n      #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n      #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n      #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n      #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n      #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n      #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n      # 控制输入MQ的日志级别\n      log-level: OFF level\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称\n\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"', 'c7600a5e8597eeb9431aeeeced19bdfd', '2022-08-10 16:14:08', '2022-08-10 03:14:08', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (340, 476, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', 'a370a59409aef01692ca40e8caf2e22d', '2022-08-10 16:14:22', '2022-08-10 03:14:22', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (346, 477, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器  ', '305d3d746069760c08484d3b5e0de5a7', '2022-08-10 16:18:43', '2022-08-10 03:18:43', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (343, 478, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n#测试\nwords: 11111', 'c7fb2d6c5cf3cbcbd70ca24c0e2a6278', '2022-08-10 16:25:35', '2022-08-10 03:25:36', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (343, 479, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n  activiti:\n    check-process-definitions: false #校验流程文件，默认校验resources下的processes文件夹里的流程文件\n    mail-server-use-ssl: true\n    database-schema-update: false #首次启动时，需要设置为true，自动建表\n    async-executor-activate: false\n  thymeleaf:\n    mode: HTML5\n    cache: false\n    prefix: classpath:/templates/\n  freemarker:\n    cache: false\n    template-loader-path: classpath:/templates/\n\n\ncustom:\n  menu:\n    write-cache: true #菜单写入缓存中\n  common:\n    linux:\n      base-file-path: /usr/app/uploadfile # base 路径\n    win:\n      base-file-path: D:/uploadfile # base 路径\n    image-mapping: /displayImag # 映射处理的路径，当 url 中有 /displayImag 时，资源映射到 D:/temp-rainy/\n    markdown-img-path: /markdown # 图片保存的路径\n    user-icon-img-path: /usericon # 图片保存的路径\n    start-init-data: false #启动时，是否初始数据（首次启动时需要设置为true,默认为true）\n  mail:\n    from: ${spring.mail.username} #系统对外发送邮件的地址\n    host: smtp.exmail.qq.com\n    port: 465\n    username: XXXXXX\n    password: XXXXXX\n  thread-pool:\n    core-pool-size: 8 # 线程池长期维持的线程数 默认 8\n    maximum-pool-size: 10 # 线程数的上限 默认 10\n    capacity: 512 # 任务的排队队列 默认 512\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  mapper-locations: classpath*:mapper/**/*Mapper.xml', '340d5ee1d5bd428611a4d95e3ffbd4da', '2022-08-10 16:30:35', '2022-08-10 03:30:35', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (338, 480, 'cloud-config.properties', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice.client.ipAddress=127.0.0.1\n####################################################################################################\n################################################## 注册中心 - nacose ###############################\n####################################################################################################\n# 命名空间\nconfig.register.namespace=${spring.cloud.nacos.config.namespace}\n# 注册中心地址\nconfig.register.serverAddr=http://${spring.cloud.nacos.config.server-addr}\n####################################################################################################\n################################################## learn-cloud-gateway ################################\n####################################################################################################\n# 移动 /usr/app/app\n# pc /usr/app/web\nconfig.gateway.static.locations=file:///D:/GitHub/learn/learn-shop-ui-admin/dist\n#config.gateway.static.locations=file:///D:/usr/app\n', '258faee275633d3b9698845b6ae65dd0', '2022-08-10 16:31:49', '2022-08-10 03:31:50', NULL, '172.25.0.1', 'D', 'dev');
INSERT INTO `his_config_info` VALUES (345, 481, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', '9cb6ac820c37db9a84badc0bc257b31f', '2022-08-10 16:34:16', '2022-08-10 03:34:16', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (403, 482, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'd75881ee127581a0ee0844d9de24d4de', '2022-08-10 16:40:24', '2022-08-10 03:40:24', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (347, 483, 'learn-shop-public-job.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8011\n\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'a6ba97cac83741f070dbf541a5e06ad5', '2022-08-10 16:52:07', '2022-08-10 03:52:08', NULL, '172.25.0.1', 'D', 'dev');
INSERT INTO `his_config_info` VALUES (348, 484, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器        ', 'e6820c2b9f3ec956d2c13730f24ddf9b', '2022-08-10 16:53:32', '2022-08-10 03:53:33', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (340, 485, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n# 控制输入MQ的日志级别\nconfig.mq.logCollect.log-level=OFF level\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', 'ef882ecd8b5cb24a349b716e2cb62000', '2022-08-10 17:08:54', '2022-08-10 04:08:54', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (405, 486, 'learn-shop-app.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', '6148847ee6059ca22e8a8675616c5b3f', '2022-08-10 17:11:45', '2022-08-10 04:11:46', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (405, 487, 'learn-shop-app.yml', 'DEFAULT_GROUP', '', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', 'd87d953c8ebfd5aac7a17b9788d22866', '2022-08-10 17:18:27', '2022-08-10 04:18:28', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (342, 488, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', '', 'feign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n\n#测试\nwords: ${server.port}', 'fb61767fe7c8d142fdc4a2290863cf22', '2022-08-10 17:32:36', '2022-08-10 04:32:36', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (344, 489, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    host: ${config.mq.host} #rabbitMQ服务器地址\n    port: ${config.mq.port}  #rabbitMQ服务器端口\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）', 'aff3bb116e21251e76661567f6a7e6fe', '2022-08-10 17:48:22', '2022-08-10 04:48:23', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (344, 490, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）\n\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'ea5aabc3b5e3adf8e60fef16d7639af9', '2022-08-10 17:49:08', '2022-08-10 04:49:09', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (349, 491, 'learn-shop-core-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: ${config.register.namespace} # 命名空间\n        server-addr: ${config.register.serverAddr} # 配置注册中心\n\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'b8e361e8634d1d9ecb7ab6fb9384cf94', '2022-08-10 17:49:38', '2022-08-10 04:49:39', NULL, '172.25.0.1', 'D', 'dev');
INSERT INTO `his_config_info` VALUES (0, 492, 'sys-config-mq.properties-copy', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n# 控制输入MQ的日志级别\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '4fb157201106a3633bdb397384f93ab2', '2022-08-10 17:53:51', '2022-08-10 04:53:52', NULL, '172.25.0.1', 'I', 'dev');
INSERT INTO `his_config_info` VALUES (340, 493, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n# 控制输入MQ的日志级别\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '4fb157201106a3633bdb397384f93ab2', '2022-08-10 17:54:33', '2022-08-10 04:54:34', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (378, 494, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  # mq 配置\r\n  rabbitmq:\r\n    # 中间件类型\r\n    type: rabbit\r\n    # mq服务器地址\r\n    host: 127.0.0.1\r\n    # mq服务器端口\r\n    port: 5672\r\n    # mq用户名和密码\r\n    username: admin\r\n    password: admin123\r\n    # 虚拟主机\r\n    virtual-host: /learn-default\r\n\r\nnotice:\r\n  # 钉钉配置\r\n  ding:\r\n    # 钉钉机器人\r\n    robot:\r\n      # webhook\r\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\r\n      # 加签\r\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\r\n  # rabbit mq 配置\r\n  mq:\r\n    # mq 的队列、路由、交换机配置\r\n    mq-collect:\r\n      # 日志收集\r\n      log-collect:\r\n        queue: logCollectQueue\r\n        exchange: logCollectExchange\r\n        exchange-type: direct\r\n        route-key: logCollectRouteKey\r\n      # 运行自动任务\r\n      run-job-test:\r\n        queue: runJobTestQueue\r\n        exchange: runJobTestExchange\r\n        exchange-type: direct\r\n        route-key: runJobTestRouteKey\r\n      # 执行sql 配置\r\n      execute-sql:\r\n        queue: executeSqlQueue\r\n        exchange: executeSqlExchange\r\n        route-key: executeSqlRouteKey\r\n      # 刷新 es 缓存 配置\r\n      refresh-es:\r\n        queue: refreshEsQueue\r\n        exchange: productExchange\r\n        route-key: refreshEsRouteKey\r\n      #  秒杀订单发送订单系统 配置\r\n      sec-kill-to-core-order:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToCoreOrderQueue\r\n        dlx-queue: secKillToCoreOrderQueueDlx\r\n        dlx-exchange: secKillOrderExchangeDlx\r\n        dlx-exchange-type: fanout\r\n      #  秒杀订单发送system系统 配置\r\n      sec-kill-to-admin-system:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToAdminSystemQueue\r\n      #  发送邮件 配置\r\n      send-mail:\r\n        queue: sendmailQueue\r\n        exchange: sendMailExchange\r\n        route-key: sendmailRouteKey\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '27b8b7b206878672b40f20c2a5398749', '2022-08-10 18:01:45', '2022-08-10 05:01:45', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (378, 495, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: direct\n        route-key: logCollectRouteKey\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', '6a0160f54b5eca4c58e7d3610838d79e', '2022-08-10 18:13:13', '2022-08-10 05:13:13', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (378, 496, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', 'd7a3496a27ea991e0cc02e64c4c66e8c', '2022-08-10 18:52:36', '2022-08-10 05:52:36', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (378, 497, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', '80c66926699d6a826df9aaab1dd32aa0', '2022-08-10 18:55:26', '2022-08-10 05:55:26', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (378, 498, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n        durable: true\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', 'fe4a5f1419406c727f4ac758d2ee8b35', '2022-08-10 18:56:13', '2022-08-10 05:56:14', 'nacos', '172.25.0.1', 'U', 'dev');
INSERT INTO `his_config_info` VALUES (342, 499, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  jpa: #JPA配置\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: update\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n# 如果路由方式是serviceId的方式，那么ribbon的生效，如果是url的方式，则zuul.host开头的生效\nribbon:\n  ReadTimeout: 15000\n  ConnectTimeout: 10000\n\n# 显示 sql 的查询参数\nlogging:\n  level:\n    org:\n      hibernate:\n        type:\n          descriptor:\n            sql:\n              BasicBinder: TRACE\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n', '9b3812e64da7788035bb1e0754acf546', '2022-08-10 19:06:30', '2022-08-10 06:06:31', 'nacos', '172.25.0.1', 'U', 'dev');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions`  (
  `role` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `resource` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `action` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `uk_role_permission`(`role`, `resource`, `action`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles`  (
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `role` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  UNIQUE INDEX `idx_user_role`(`username`, `role`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity`  (
  `id` bigint unsigned NOT NULL COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int unsigned NOT NULL COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL COMMENT '使用量',
  `max_size` int unsigned NOT NULL COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL COMMENT '聚合子配置最大个数',
  `max_aggr_size` int unsigned NOT NULL COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '租户容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(0) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(0) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_info_kptenantid`(`kp`, `tenant_id`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'tenant_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
INSERT INTO `tenant_info` VALUES (3, '1', 'seata-dev', 'seata-dev', 'seata 分布式事务-开发环境', 'nacos', 1614732471148, 1614732471148);
INSERT INTO `tenant_info` VALUES (4, '1', 'pro', 'pro', '生产', 'nacos', 1615533858715, 1615533993047);
INSERT INTO `tenant_info` VALUES (5, '1', 'dev', 'dev', '开发', 'nacos', 1615533876724, 1615533986301);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);

SET FOREIGN_KEY_CHECKS = 1;
